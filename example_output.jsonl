{"file": "row_000001", "func_name": "id", "input_text": "IfcComplexPropertyTemplate::IfcComplexPropertyTemplate( int <ID_1> ) { m_entity_id = <ID_1>; }", "target_text": "{\"<ID_1>\": \"id\"}"}
{"file": "row_000002", "func_name": "sc_main", "input_text": "int sc_main(int, char*[]) \n{  \n  tb_env* <ID_2>;\n  tb_test* <ID_1>;\n\n  <ID_2> = new tb_env(\"<ID_2>\");\n  <ID_1> = new tb_test(\"<ID_1>\");\n\n  uvm::uvm_root::get()->set_report_verbosity_level(uvm::UVM_FULL);\n  <ID_1>->set_report_verbosity_level(uvm::UVM_FULL);\n  <ID_2>->set_report_verbosity_level(uvm::UVM_FULL);\n  uvm::uvm_report_server::get_server()->set_max_quit_count(10);\n\n  uvm::run_test();\n\n  delete <ID_2>;\n  delete <ID_1>;\n\n  return 0;\n}", "target_text": "{\"<ID_1>\": \"test\", \"<ID_2>\": \"env\"}"}
{"file": "row_000003", "func_name": "y", "input_text": "ll powe(ll <ID_2>, ll <ID_3>){ <ID_2> = <ID_2>%mod, <ID_3>=<ID_3>%(mod-1);ll <ID_1> = 1;while(<ID_3>>0){if (<ID_3>&1){<ID_1> = (1ll * <ID_2> * <ID_1>)%mod;}<ID_3>>>=1;<ID_2> = (1ll * <ID_2> * <ID_2>)%mod;}return <ID_1>;}", "target_text": "{\"<ID_1>\": \"ans\", \"<ID_2>\": \"x\", \"<ID_3>\": \"y\"}"}
{"file": "row_000004", "func_name": "parent", "input_text": "RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *<ID_2>) :\n    QAbstractTableModel(<ID_2>), walletModel(<ID_2>)\n{\n    nReceiveRequestsMaxId = 0;\n\n    // Load entries from wallet\n    std::vector<std::string> <ID_1>;\n    <ID_2>->loadReceiveRequests(<ID_1>);\n    for (const std::string& request : <ID_1>)\n        addNewRequest(request);\n\n    /* These columns must match the indices in the ColumnIndex enumeration */\n    columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n\n    connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n}", "target_text": "{\"<ID_1>\": \"vReceiveRequests\", \"<ID_2>\": \"parent\"}"}
{"file": "row_000005", "func_name": "FreeInvGFX", "input_text": "void __cdecl FreeInvGFX()\r\n{\r\n\tvoid *<ID_2> = <ID_1>;\r\n\r\n\t<ID_1> = NULL;\r\n\tmem_free_dbg(<ID_2>);\r\n}", "target_text": "{\"<ID_1>\": \"pInvCels\", \"<ID_2>\": \"invCels\"}"}
