{"file": "row_000001", "func_name": "id", "input_text": "IfcComplexPropertyTemplate::IfcComplexPropertyTemplate( int <ID_1> ) { m_entity_id = <ID_1>; }", "target_text": "{\"<ID_1>\": \"id\"}"}
{"file": "row_000001", "func_name": "options", "input_text": "shared_ptr<BuildingObject> IfcComplexPropertyTemplate::getDeepCopy( BuildingCopyOptions& <ID_4> )\r\n{\r\n\tshared_ptr<IfcComplexPropertyTemplate> <ID_2>( new IfcComplexPropertyTemplate() );\r\n\tif( m_GlobalId )\r\n\t{\r\n\t\tif( <ID_4>.create_new_IfcGloballyUniqueId ) { <ID_2>->m_GlobalId = shared_ptr<IfcGloballyUniqueId>(new IfcGloballyUniqueId( createBase64Uuid<wchar_t>().data() ) ); }\r\n\t\telse { <ID_2>->m_GlobalId = dynamic_pointer_cast<IfcGloballyUniqueId>( m_GlobalId->getDeepCopy(<ID_4>) ); }\r\n\t}\r\n\tif( m_OwnerHistory )\r\n\t{\r\n\t\tif( <ID_4>.shallow_copy_IfcOwnerHistory ) { <ID_2>->m_OwnerHistory = m_OwnerHistory; }\r\n\t\telse { <ID_2>->m_OwnerHistory = dynamic_pointer_cast<IfcOwnerHistory>( m_OwnerHistory->getDeepCopy(<ID_4>) ); }\r\n\t}\r\n\tif( m_Name ) { <ID_2>->m_Name = dynamic_pointer_cast<IfcLabel>( m_Name->getDeepCopy(<ID_4>) ); }\r\n\tif( m_Description ) { <ID_2>->m_Description = dynamic_pointer_cast<IfcText>( m_Description->getDeepCopy(<ID_4>) ); }\r\n\tif( m_UsageName ) { <ID_2>->m_UsageName = dynamic_pointer_cast<IfcLabel>( m_UsageName->getDeepCopy(<ID_4>) ); }\r\n\tif( m_TemplateType ) { <ID_2>->m_TemplateType = dynamic_pointer_cast<IfcComplexPropertyTemplateTypeEnum>( m_TemplateType->getDeepCopy(<ID_4>) ); }\r\n\tfor( size_t <ID_5>=0; <ID_5><<ID_1>.size(); ++<ID_5> )\r\n\t{\r\n\t\tauto <ID_3> = <ID_1>[<ID_5>];\r\n\t\tif( <ID_3> )\r\n\t\t{\r\n\t\t\t<ID_2>-><ID_1>.push_back( dynamic_pointer_cast<IfcPropertyTemplate>(<ID_3>->getDeepCopy(<ID_4>) ) );\r\n\t\t}\r\n\t}\r\n\treturn <ID_2>;\r\n}", "target_text": "{\"<ID_1>\": \"m_HasPropertyTemplates\", \"<ID_2>\": \"copy_self\", \"<ID_3>\": \"item_ii\", \"<ID_4>\": \"options\", \"<ID_5>\": \"ii\"}"}
{"file": "row_000001", "func_name": "stream", "input_text": "void IfcComplexPropertyTemplate::getStepLine( std::stringstream& <ID_1> ) const\r\n{\r\n\t<ID_1> << \"#\" << m_entity_id << \"= IFCCOMPLEXPROPERTYTEMPLATE\" << \"(\";\r\n\tif( m_GlobalId ) { m_GlobalId->getStepParameter( <ID_1> ); } else { <ID_1> << \"*\"; }\r\n\t<ID_1> << \",\";\r\n\tif( m_OwnerHistory ) { <ID_1> << \"#\" << m_OwnerHistory->m_entity_id; } else { <ID_1> << \"*\"; }\r\n\t<ID_1> << \",\";\r\n\tif( m_Name ) { m_Name->getStepParameter( <ID_1> ); } else { <ID_1> << \"*\"; }\r\n\t<ID_1> << \",\";\r\n\tif( m_Description ) { m_Description->getStepParameter( <ID_1> ); } else { <ID_1> << \"*\"; }\r\n\t<ID_1> << \",\";\r\n\tif( m_UsageName ) { m_UsageName->getStepParameter( <ID_1> ); } else { <ID_1> << \"$\"; }\r\n\t<ID_1> << \",\";\r\n\tif( m_TemplateType ) { m_TemplateType->getStepParameter( <ID_1> ); } else { <ID_1> << \"$\"; }\r\n\t<ID_1> << \",\";\r\n\twriteEntityList( <ID_1>, m_HasPropertyTemplates );\r\n\t<ID_1> << \");\";\r\n}", "target_text": "{\"<ID_1>\": \"stream\"}"}
{"file": "row_000001", "func_name": "stream", "input_text": "void IfcComplexPropertyTemplate::getStepParameter( std::stringstream& <ID_1>, bool ) const { <ID_1> << \"#\" << m_entity_id; }", "target_text": "{\"<ID_1>\": \"stream\"}"}
{"file": "row_000001", "func_name": "map", "input_text": "void IfcComplexPropertyTemplate::readStepArguments( const std::vector<std::wstring>& <ID_2>, const std::<ID_4><int,shared_ptr<BuildingEntity> >& <ID_4> )\r\n{\r\n\tconst size_t <ID_1> = <ID_2>.size();\r\n\tif( <ID_1> != 7 ){ std::stringstream <ID_3>; <ID_3> << \"Wrong parameter count for entity IfcComplexPropertyTemplate, expecting 7, having \" << <ID_1> << \". Entity ID: \" << m_entity_id << std::endl; throw BuildingException( <ID_3>.str().c_str() ); }\r\n\tm_GlobalId = IfcGloballyUniqueId::createObjectFromSTEP( <ID_2>[0], <ID_4> );\r\n\treadEntityReference( <ID_2>[1], m_OwnerHistory, <ID_4> );\r\n\tm_Name = IfcLabel::createObjectFromSTEP( <ID_2>[2], <ID_4> );\r\n\tm_Description = IfcText::createObjectFromSTEP( <ID_2>[3], <ID_4> );\r\n\tm_UsageName = IfcLabel::createObjectFromSTEP( <ID_2>[4], <ID_4> );\r\n\tm_TemplateType = IfcComplexPropertyTemplateTypeEnum::createObjectFromSTEP( <ID_2>[5], <ID_4> );\r\n\treadEntityReferenceList( <ID_2>[6], m_HasPropertyTemplates, <ID_4> );\r\n}", "target_text": "{\"<ID_1>\": \"num_args\", \"<ID_2>\": \"args\", \"<ID_3>\": \"err\", \"<ID_4>\": \"map\"}"}
